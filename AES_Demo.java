
    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */
//package crypto.assignment.two;


import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.*;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Objects;
import java.util.logging.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import javax.swing.*;
import javax.crypto.*;
import javax.imageio.ImageIO;
import java.nio.*;
import java.nio.file.Files;
import java.net.*;
import java.awt.Toolkit;

import javax.imageio.ImageIO;

import java.awt.image.*;
    /**
     *
     * @author Pradeep
     */
    @SuppressWarnings({"unused" })

    //start of the demo file, extends the workings of a JFrame
    public class AES_Demo extends JFrame {

        // constructor: calls initComponents
        public AES_Demo() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */

        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

            //creates the java file users

            /*
                These are JFrame objects that point to the users default directory by default.

                They open up a menu showing the files within the directory which allows the user
                to choose a file and open it (like any file selector used on websites)
             */

            jFileChooser1 = new JFileChooser();
            jFileChooser2 = new JFileChooser();

            jPanel1 = new JPanel();

            jTextField1 = new JTextField();
            jTextField2 = new JTextField();
            jTextField3 = new JTextField();
            jTextField4 = new JTextField();

            jButton1 = new JButton();
            jButton2 = new JButton();
            jButton3 = new JButton();

            jLabel1 = new JLabel();
            jLabel2 = new JLabel();
            jLabel3 = new JLabel();

            jPanel2 = new JPanel();

            jRadioButton1 = new JRadioButton();
            jRadioButton2 = new JRadioButton();

            aesModeSelector = new JComboBox<>(new String[]{"Run AES in ECB mode", "Run AES in CBC mode", "Run AES in OFB mode"});
            aesModeSelector.setEditable(false);

            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

            //sets the text of the JButton
            jButton1.setText("Browse Files");

            //adds an action listener to the first JButton and then defines a private event
            jButton1.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });

            //second JPanel border design
            jPanel2.setBorder(BorderFactory.createEtchedBorder());

            //JLabel text
            jLabel1.setText("Decryption Time (ms)");

            //JLabel text
            jLabel2.setText("Encryption Time (ms)");

            //JLabel text
            jLabel3.setText("Encryption");

            //JButton 2 text
            jButton2.setText("Begin AES");

            //adds an action listener to the second JButton and then defines a private event
            jButton2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });

            //adds an action listener to the fourth text field and then defines a private event
            jTextField4.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    jTextField4ActionPerformed(evt);
                }
            });

            //adds an action listener to the third JButton and then defines a private event

            jButton3.setText("Choose Save Directory");
            jButton3.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });

            //definition for the group layout to be used for JPanel 2
            GroupLayout jPanel2Layout = new GroupLayout(jPanel2);

            //sets the layout for JPanel 2 to the group layout we defined
            jPanel2.setLayout(jPanel2Layout);

            //arbitrary stuff with the group layout, DO NOT OVERTHINK THIS
            jPanel2Layout.setHorizontalGroup(
                    jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                    .addComponent(jLabel1)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, 80, GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(32, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(17, 17, 17)
                                                    .addComponent(jButton3)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jTextField4))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                                    .addGap(207, 207, 207)
                                                                    .addComponent(jButton2))
                                                                    .addComponent(aesModeSelector)
                                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                                    .addContainerGap()
                                                                    .addComponent(jLabel3)))
                                                    .addGap(0, 0, Short.MAX_VALUE)))
                                    .addContainerGap())
            );

            //arbitrary stuff with the group layout, DO NOT OVERTHINK THIS
            jPanel2Layout.setVerticalGroup(
                    jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel3)
                                    .addGap(17, 17, 17)
                                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButton3)
                                            .addComponent(jTextField4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                    //Drop down menu is added
                                    .addComponent(aesModeSelector)
                                    .addComponent(jButton2)
                                    .addGap(30, 30, 30)
                                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)
                                            .addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                    .addGap(20, 20, 20))
            );

            //sets the text for the first radio button
            jRadioButton1.setText("Preserve Image Header");

            //sets the text for the second radio button
            jRadioButton2.setText("Reduced AES - 4 rounds");

            //definition of the group layout to be used for JPanel 1
            GroupLayout jPanel1Layout = new GroupLayout(jPanel1);

            //sets the layout for JPanel 1 to the group that we defined
            jPanel1.setLayout(jPanel1Layout);

            //arbitrary stuff with the group layout, DO NOT OVERTHINK THIS
            jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(154, 154, 154)
                                                    .addComponent(jRadioButton1))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(154, 154, 154)
                                                    .addComponent(jRadioButton2))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(33, 33, 33)
                                                    .addComponent(jButton1)
                                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE)))
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addContainerGap(11, Short.MAX_VALUE)
                                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(11, Short.MAX_VALUE))
            );

            //arbitrary stuff with the group layout, DO NOT OVERTHINK THIS
            jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap(37, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButton1)
                                            .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton2)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap())
            );

            //exposes the elements on JPanel2 to stuff like screen readers by making
            //them accessible
            jPanel2.getAccessibleContext().setAccessibleName("Encryption");

            //defines a new group layout to be used for the entire content of the JFrame
            GroupLayout layout = new GroupLayout(getContentPane());

            //the main content layout gets set to the layout we defined
            getContentPane().setLayout(layout);

            //arbitrary stuff with the group layout, DO NOT OVERTHINK THIS
            layout.setHorizontalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );

            //sizes the JFrame so that all its contents are at or above their preferred sizes
            pack();
        }// </editor-fold>//GEN-END:initComponents

        private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            int x1 = 0, x2 = 0, x3 = 0, x4 = 0;
            boolean boolx = false;

            //the file path's name is set to whatever is read from textbox 1
            String file_path = jTextField1.getText();

            //a new File object is created using the name of the file path passed in
            File input_image_file = new File(file_path);

            //the destination folders for the final outputs are retrieved from
            //whatever the user enters in textbox 4

            //the output file names are set to INPUTPATH\encrypted.jpg and INPUTPATH\decrypted.jpg
            String out_path1 = jTextField4.getText() + "\\" +"encrypted.jpg";
            String out_path2 = jTextField4.getText() + "\\" + "decrypted.jpg";

            //intializing the string for the round key
            String key_st = "keyforaesencryptionanddecryption";

            //gets the bytes of the string and uses it to generate the key
            //in byte values
            byte[] key = key_st.getBytes();

            //shortens the length of the key to 16 bytes
            key = Arrays.copyOf(key, 16);

            //creates a new file object using the string retrieved from TextBox1
            File fi = new File(file_path);

            //Image input_image = Toolkit.getDefaultToolkit().getImage(file_path);
            byte[] input_data;
            byte[] output_data_encrypt = new byte[1024];
            byte[] output_data_decrypt = new byte [1024];
            long start_time,end_time,encrypt_time = 0,decrypt_time = 0;


            try {

                /*
                    This "try" method will determine what actions to follow
                    according to which radio buttons are selected
                 */

                BufferedImage buff;

                String selectedMethod = (String)aesModeSelector.getSelectedItem();

                input_data = Files.readAllBytes(fi.toPath());

                int bmp_header = 54;
                byte[] input_data1 = Arrays.copyOfRange(input_data, bmp_header, input_data.length);

                SecretKey secretKey = new SecretKeySpec(key, 0, key.length, "AES");

                SecureRandom random = new SecureRandom();
                byte[] ivalue = new byte[16]; // AES uses a block size of 16 bytes
                random.nextBytes(ivalue);
                AES.setIV(ivalue); // Set the IV for the AES instance

                IvParameterSpec iv = new IvParameterSpec(ivalue);

                if (!jRadioButton1.isSelected()) {
                    if (!jRadioButton2.isSelected()) {

                        //if neither radio button is selected

                        //start time is the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        //based of the method selected we run the corresponding encode function
                        output_data_encrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.encryptECB(input_data, key);
                            case "Run AES in CBC mode" -> AES.encryptCBC(input_data, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.encryptOFB(input_data, secretKey, iv);
                            default -> output_data_encrypt;
                        };

                        //endtime is the current time in milliseconds
                        //      --notice this is after our encryption process runs
                        end_time = System.currentTimeMillis();

                        //the time to encrypt is endtime-startime (of course!)
                        encrypt_time = end_time - start_time;

                        //makes our encrypt file (path is defined earlier) a mode of storage for output
                        FileOutputStream fout = new FileOutputStream(out_path1);

                        //the output of our encrypt function goes into our encrypt file
                        fout.write(output_data_encrypt);

                        //start time now is reset to the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        output_data_decrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.decryptECB(output_data_encrypt, key);
                            case "Run AES in CBC mode" -> AES.decryptCBC(output_data_encrypt,secretKey, iv);
                            case "Run AES in OFB mode" -> AES.decryptOFB(output_data_encrypt,secretKey, iv);
                            default -> output_data_decrypt;
                        };

                        //end time is reset to the current time in milliseconds
                        end_time = System.currentTimeMillis();

                        //the time to decrypt is endtime-startime (of course!)
                        decrypt_time = end_time - start_time;

                        //makes our decrypt file (path is defined earlier) a mode of storage for output
                        FileOutputStream fout1 = new FileOutputStream(out_path2);

                        //the output of our decrypt function goes into our decrypt file
                        fout1.write(output_data_decrypt);

                        //close both output files and end
                        fout.close();
                        fout1.close();
                    }
                    if (jRadioButton2.isSelected()) {
                        //if only RadioButton 2 is selected

                        //the start time is set to the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        //implement another encryption method
                        output_data_encrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.encrypt_r(input_data, key);
                            case "Run AES in CBC mode" -> AES.encryptCBC(input_data,secretKey, iv);
                            case "Run AES in OFB mode" -> AES.encryptOFB(input_data, secretKey, iv);
                            default -> output_data_encrypt;
                        };

                        //the end time is set to the current time in milliseconds
                        end_time = System.currentTimeMillis();

                        //the time to encrypt is endtime-startime (of course!)
                        encrypt_time = end_time - start_time;

                        //our encrypt file is converted to a mode for storing output
                        FileOutputStream fout = new FileOutputStream(out_path1);

                        //our encryption output is written to the file
                        fout.write(output_data_encrypt);

                        //the start time is overwritten to the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        output_data_decrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.decrypt_r(output_data_encrypt, key);
                            case "Run AES in CBC mode" -> AES.decryptCBC(output_data_encrypt, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.decryptOFB(output_data_encrypt, secretKey, iv);
                            default -> output_data_decrypt;
                        };

                        //our end time is overwritten to be the current time in milliseconds
                        end_time = System.currentTimeMillis();

                        //the time to decrypt is endtime-startime (of course!)
                        decrypt_time = end_time - start_time;

                        //our decrypt file is a mode for output now
                        FileOutputStream fout1 = new FileOutputStream(out_path2);

                        //the results from our decryption method are stored in the file
                        fout1.write(output_data_decrypt);

                        //close our output files
                        fout.close();
                        fout1.close();
                    }
                }
                if (jRadioButton1.isSelected()) {
                    if (!jRadioButton2.isSelected()) {

                        //if only RadioButton1 is selected

                        //set the start time to the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        output_data_encrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.encryptECB(input_data, key);
                            case "Run AES in CBC mode" -> AES.encryptCBC(input_data, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.encryptOFB(input_data, secretKey, iv);
                            default -> output_data_encrypt;
                        };

                        //set the end time to the current time in milliseconds
                        end_time = System.currentTimeMillis();

                        //calculate the encrypt time as endtime-starttime
                        encrypt_time = end_time - start_time;

                        //our encrypt file is now a mode for output
                        FileOutputStream fout = new FileOutputStream(out_path1);

                        //create a new array for the output;

                        byte[] output_array = new byte[input_data.length+16];

                        System.out.println("fine1");
                        //System.out.println("input:" + input_data.length + "input1:" + input_data1.length + "outputdat" + output_data_encrypt.length + "outputarray" + output_array.length);

                        //copies the header to the output array
                        System.arraycopy(input_data, 0, output_array, 0, bmp_header);
                        System.out.println("fine2");

                        //copies the encrypted data to the output array
                        System.arraycopy(output_data_encrypt, 0, output_array, bmp_header, output_data_encrypt.length);
                        System.out.println("fine3");

                        //the output array gets copied into the file
                        fout.write(output_array);

                        //the start time is overwritten to the current time
                        start_time = System.currentTimeMillis();

                        output_data_decrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.decryptECB(output_data_encrypt, key);
                            case "Run AES in CBC mode" -> AES.decryptCBC(output_data_encrypt, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.decryptOFB(output_data_encrypt, secretKey, iv);
                            default -> output_data_decrypt;
                        };

                        //the end time is overwritten to the current time
                        end_time = System.currentTimeMillis();

                        //our time to decrypt is the endtime-starttime
                        decrypt_time = end_time - start_time;

                        //our decrypt file is now a mode for storing output
                        FileOutputStream fout1 = new FileOutputStream(out_path2);

                        //an array is used to store the result of our output
                        byte[] output_array1 = new byte[input_data.length+16];

                        //the header is put in the output array
                        System.arraycopy(input_data, 0, output_array1, 0, bmp_header);

                        //the decrypted contents are now put into our output array
                        System.arraycopy(output_data_decrypt, 0, output_array1, bmp_header, output_data_decrypt.length);

                        //write our output array into our file
                        fout1.write(output_array1);

                        //close our output files
                        fout.close();
                        fout1.close();
                    }
                    if (jRadioButton2.isSelected()) {
                        //if both buttons are selected

                        //the start time is set to the current time
                        start_time = System.currentTimeMillis();

                        output_data_encrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.encrypt_r(input_data, key);
                            case "Run AES in CBC mode" -> AES.encryptCBC(input_data, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.encryptOFB(input_data, secretKey, iv);
                            default -> output_data_encrypt;
                        };

                        // the end time is set to the current time
                        end_time = System.currentTimeMillis();

                        //the total encrypt time is endtime - starttime
                        encrypt_time = end_time - start_time;

                        //our encrypt is allowed to accept output
                        FileOutputStream fout = new FileOutputStream(out_path1);

                        //our output data is stored in an array
                        byte[] output_array = new byte[input_data.length+16];

                        // the header is copied into the output array
                        System.arraycopy(input_data, 0, output_array, 0, bmp_header);

                        //copy the result of our encryption function to the output array
                        System.arraycopy(output_data_encrypt, 0, output_array, bmp_header, output_data_encrypt.length);

                        //print the output array into the file
                        fout.write(output_array);

                        //start time is set to the current time in milliseconds
                        start_time = System.currentTimeMillis();

                        output_data_decrypt = switch (Objects.requireNonNull(selectedMethod)) {
                            case "Run AES in ECB mode" -> AES.decrypt_r(output_data_encrypt, key);
                            case "Run AES in CBC mode" -> AES.decryptCBC(output_data_encrypt, secretKey, iv);
                            case "Run AES in OFB mode" -> AES.decryptOFB(output_data_encrypt, secretKey, iv);
                            default -> output_data_decrypt;
                        };

                        //set the end time to the current time in milliseconds
                        end_time = System.currentTimeMillis();

                        //the time to decrypt is the endtime - starttime
                        decrypt_time = end_time - start_time;

                        //our decrypt file may now be used to store the output
                        FileOutputStream fout1 = new FileOutputStream(out_path2);

                        //make a new output array to store the results of the decryption
                        byte[] output_array1 = new byte[input_data.length+16];

                        //stores the header in the output file
                        System.arraycopy(input_data, 0, output_array1, 0, bmp_header);

                        //copy the decrypted data into the output array
                        System.arraycopy(output_data_decrypt, 0, output_array1, bmp_header, output_data_decrypt.length);

                        //write the output array to our decrypt file
                        fout1.write(output_array1);

                        //close both output files
                        fout.close();
                        fout1.close();
                    }
                }
            } catch (IOException e) {

                //shoudl not be reached!!!

                //System.out.println("input:" + input_data.length + "input1:" + input_data1.length + "outputdat" + output_data_encrypt.length);
                System.out.println(e);
                //e.printStackTrace();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }

            //display the encrypt time in the text field
            jTextField2.setText(Long.toString(encrypt_time)); //decryption time

            //display the decrypt time in the text field
            jTextField3.setText(Long.toString(decrypt_time)); //encryption time

            //show a message saying the encryption and decryption is done
            JOptionPane.showMessageDialog(null, "Encryption and decryption is done !!");

            /* To write code for  for encryption & decryption here... */

        }//GEN-LAST:event_jButton2ActionPerformed

        //ran when the first button is pressed to choose a file
        private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

            // file chooser to choose image (Browse)
            int returnVal = jFileChooser1.showOpenDialog(this);

            //if choose an excepted file option
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                //holds the value of the selected file
                File file = jFileChooser1.getSelectedFile();

                //change the file permission to readable if not only done soo
                if (!file.canRead()) {
                    file.setReadable(true);
                }


                //display file name in text field
                jTextField1.setText(file.getAbsolutePath());

            } else
            {
                //catches an instance if the file selection is blank or a directory is chosen
                System.out.println("You must choose a file.");
            }
        }//GEN-LAST:event_jButton1ActionPerformed


        //does not look like this function does anything
        private void jTextField4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        }//GEN-LAST:event_jTextField4ActionPerformed

        private void jButton3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

            //can only choose a directory in the file select
            jFileChooser2.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = jFileChooser2.showOpenDialog(this);

            //as long as the selected option is a valid directory
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {

                //get the file value
                File file = jFileChooser2.getSelectedFile();

                //set the permissions to read if not already done so
                if (!file.canRead()) {
                    file.setReadable(true);
                }

                // display file name in text field
                jTextField4.setText(file.getAbsolutePath());
            } else
            {
                //returned if no directory is selected or if we have instead selected a file
                System.out.println("You must choose a save directory.");
            }
        }//GEN-LAST:event_jButton3ActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String[] args) {

            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
             */

            try {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                     UnsupportedLookAndFeelException ex) {
                Logger.getLogger(AES_Demo.class.getName()).log(Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            EventQueue.invokeLater(new Runnable() {
                public void run() {

                    //makes sure our JFrame can be seen when we run the program
                    new AES_Demo().setVisible(true);
                }
            });
        }



        // Variables declaration - do not modify//GEN-BEGIN:variables

        //buttons
        private JButton jButton1;
        private JButton jButton2;
        private JButton jButton3;

        //file choosers
        private JFileChooser jFileChooser1;
        private JFileChooser jFileChooser2;

        //labels
        private JLabel jLabel1;
        private JLabel jLabel2;
        private JLabel jLabel3;

        //panels
        private JPanel jPanel1;
        private JPanel jPanel2;

        //radio buttons
        private JRadioButton jRadioButton1;
        private JRadioButton jRadioButton2;

        //text fields
        private JTextField jTextField1;
        private JTextField jTextField2;
        private JTextField jTextField3;
        private JTextField jTextField4;

        //combo box for AES encryption mode
        private JComboBox<String> aesModeSelector;

        // End of variables declaration//GEN-END:variables
    }